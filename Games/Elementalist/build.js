(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var AIR, BACKGROUND_COLOR, BARS_OFFSET_X, BARS_OFFSET_Y, BAR_BACKGROUND_COLOR, BAR_BORDER_COLOR, BAR_BORDER_SIZE, BAR_HEIGHT, BAR_WIDTH, BASE_BONUS_MODIFIER, BASE_POINTS, BASE_TIMER, BOARD_OFFSET_X, BOARD_OFFSET_Y, CANVAS_HEIGHT, CANVAS_WIDTH, COLUMNS, EARTH, FIRE, FPS, GAME_TEXT_COLOR, NEXT_LVL_BASE, RATIO, ROWS, SELECTION_COLOR, TEXTURES, TILES, TILE_BORDER_COLOR, TILE_BORDER_SIZE, TILE_HEIGHT, TILE_WIDTH, TIMER_MODIFIER, WATER, WINDOW_COLOR, WINDOW_TEXT_COLOR, areAdjacents, barsRenderOpts, board, boardRenderOpts, bonus, bringDown, canvas, canvasRect, ctx, currentLvl, drawBars, drawBoard, drawProgressBar, drawSelectedTile, drawText, drawTile, dt, exp, fillRect, gameOver, generateBoard, getColumn, getExp, getIndex, getLastBest, getRow, horizontalMatch, lastBestLvl, mStep, match, merge, modifier, pick, points, previousTime, random, render, reset, running, setLastBest, step, strokeRect, switchTiles, tick, tile1, tile2, timer, update, verticalMatch, _ref,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

random = function(min, max) {
  return Math.floor(min + Math.random() * (max - min + 1));
};

pick = function(choices) {
  return choices[random(0, choices.length - 1)];
};

merge = function() {
  var key, obj, sources, src, value, _i, _len;
  obj = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  for (_i = 0, _len = sources.length; _i < _len; _i++) {
    src = sources[_i];
    for (key in src) {
      if (!__hasProp.call(src, key)) continue;
      value = src[key];
      obj[key] = value;
    }
  }
  return obj;
};

getColumn = function(index, columns) {
  return index % columns;
};

getRow = function(index, columns) {
  return Math.floor(index / columns);
};

getIndex = function(x, y, columns) {
  return y * columns + x;
};

horizontalMatch = function(board, index, columns) {
  var i, length, start, sum, x, y, _i, _j;
  sum = 0;
  length = board.length;
  x = getColumn(index, columns);
  y = getRow(index, columns);
  start = x - 1;
  if ((0 <= start && start < columns)) {
    for (i = _i = start; start <= 0 ? _i <= 0 : _i >= 0; i = start <= 0 ? ++_i : --_i) {
      if (board[y * columns + i] !== board[index]) {
        break;
      }
      sum += 1;
    }
  }
  start = x + 1;
  if ((0 <= start && start < columns)) {
    for (i = _j = start; start <= columns ? _j < columns : _j > columns; i = start <= columns ? ++_j : --_j) {
      if (!(y * columns + start < length)) {
        break;
      }
      if (board[y * columns + i] !== board[index]) {
        break;
      }
      sum += 1;
    }
  }
  return sum >= 2;
};

verticalMatch = function(board, index, columns, rows) {
  var i, length, start, sum, x, y, _i, _j;
  sum = 0;
  length = board.length;
  x = getColumn(index, columns);
  y = getRow(index, columns);
  start = y - 1;
  if ((0 <= y && y < rows)) {
    for (i = _i = start; start <= 0 ? _i <= 0 : _i >= 0; i = start <= 0 ? ++_i : --_i) {
      if (board[i * columns + x] !== board[index]) {
        break;
      }
      sum += 1;
    }
  }
  start = y + 1;
  if ((0 <= y && y < rows)) {
    for (i = _j = start; start <= rows ? _j < rows : _j > rows; i = start <= rows ? ++_j : --_j) {
      if (!(start * columns + x < length)) {
        break;
      }
      if (board[i * columns + x] !== board[index]) {
        break;
      }
      sum += 1;
    }
  }
  return sum >= 2;
};

match = function(board, index, columns, rows) {
  var horizontal, vertical;
  horizontal = horizontalMatch(board, index, columns);
  vertical = verticalMatch(board, index, columns, rows);
  return horizontal || vertical;
};

areAdjacents = function(tile1, tile2, columns) {
  var x1, x2, y1, y2, _i, _j, _ref, _ref1, _ref2, _ref3, _results, _results1;
  x1 = getColumn(tile1, columns);
  y1 = getRow(tile1, columns);
  x2 = getColumn(tile2, columns);
  y2 = getRow(tile2, columns);
  if (__indexOf.call((function() {
    _results = [];
    for (var _i = _ref = x2 - 1, _ref1 = x2 + 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this), x1) < 0) {
    return false;
  }
  if (__indexOf.call((function() {
    _results1 = [];
    for (var _j = _ref2 = y2 - 1, _ref3 = y2 + 1; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; _ref2 <= _ref3 ? _j++ : _j--){ _results1.push(_j); }
    return _results1;
  }).apply(this), y1) < 0) {
    return false;
  }
  if (x1 !== x2 && y1 !== y2) {
    return false;
  }
  return true;
};

drawBoard = function(board, columns, ctx, tileW, tileH, textures, options) {
  var i, _i, _ref, _ref1, _results;
  _results = [];
  for (i = _i = 0, _ref = board.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    _results.push(drawTile(ctx, i, columns, tileW, tileH, (_ref1 = textures[board[i]]) != null ? _ref1 : '#000', options));
  }
  return _results;
};

drawSelectedTile = function(ctx, columns, width, height, tile, options) {
  if (tile != null) {
    return drawTile(ctx, tile, columns, width, height, SELECTION_COLOR, options);
  }
};

drawTile = function(ctx, index, columns, width, height, color, options) {
  var borderColor, borderSize, offsetX, offsetY, x, y;
  borderColor = options.borderColor, borderSize = options.borderSize, offsetX = options.offsetX, offsetY = options.offsetY;
  x = offsetX + getColumn(index, columns) * width;
  y = offsetY + getRow(index, columns) * height;
  fillRect(ctx, x, y, width, height, color);
  return strokeRect(ctx, x, y, width, height, borderColor, borderSize);
};

fillRect = function(ctx, x, y, width, height, color) {
  ctx.fillStyle = color;
  return ctx.fillRect(x, y, width, height);
};

strokeRect = function(ctx, x, y, width, height, color, size) {
  ctx.lineWidth = size;
  ctx.strokeStyle = color;
  return ctx.strokeRect(x, y, width, height);
};

drawProgressBar = function(ctx, value, max, x, y, width, height, color, options) {
  var backgroundColor, borderColor, borderSize, fill;
  backgroundColor = options.backgroundColor, borderColor = options.borderColor, borderSize = options.borderSize;
  fill = value / max;
  fillRect(ctx, x, y, width, height, backgroundColor);
  fillRect(ctx, x, y, fill * width, height, color);
  return strokeRect(ctx, x, y, width, height, borderColor, borderSize);
};

drawBars = function(ctx, bars, width, height, options) {
  var bar, color, current, fill, i, max, offsetX, offsetY, x, y, _i, _len, _results;
  offsetX = options.offsetX, offsetY = options.offsetY;
  _results = [];
  for (i = _i = 0, _len = bars.length; _i < _len; i = ++_i) {
    bar = bars[i];
    current = bar.current, max = bar.max, color = bar.color;
    x = offsetX;
    y = offsetY + i * height;
    fill = bar.current / bar.max;
    _results.push(drawProgressBar(ctx, current, max, x, y, width, height, color, options));
  }
  return _results;
};

drawText = function(ctx, text, x, y, color, options) {
  var align, baseline, font;
  align = options.align, baseline = options.baseline, font = options.font;
  ctx.fillStyle = color;
  ctx.font = font;
  ctx.textAlign = align;
  ctx.textBaseLine = baseline;
  return ctx.fillText(text, x, y);
};

getLastBest = function() {
  var _ref;
  return (_ref = typeof localStorage !== "undefined" && localStorage !== null ? localStorage.getItem('lastBestLvl') : void 0) != null ? _ref : 0;
};

setLastBest = function(lvl) {
  return typeof localStorage !== "undefined" && localStorage !== null ? localStorage.setItem('lastBestLvl', lvl) : void 0;
};

RATIO = 2;

CANVAS_WIDTH = 320 * RATIO;

CANVAS_HEIGHT = 480 * RATIO;

BACKGROUND_COLOR = '#fff';

FPS = 60;

ROWS = 10;

COLUMNS = 8;

TILE_WIDTH = CANVAS_WIDTH / 10;

TILE_HEIGHT = TILE_WIDTH;

BOARD_OFFSET_X = TILE_WIDTH;

BOARD_OFFSET_Y = TILE_HEIGHT * 4;

TILE_BORDER_SIZE = 4;

TILE_BORDER_COLOR = '#fff';

TEXTURES = ['#ddd', '#855', '#f55', '#69f'];

BAR_WIDTH = TILE_WIDTH * 8;

BAR_HEIGHT = TILE_HEIGHT / 2;

BAR_BACKGROUND_COLOR = '#eee';

BAR_BORDER_SIZE = 4;

BAR_BORDER_COLOR = '#fff';

BARS_OFFSET_X = TILE_WIDTH;

BARS_OFFSET_Y = TILE_HEIGHT * 2.5;

GAME_TEXT_COLOR = '#444';

WINDOW_TEXT_COLOR = '#ddd';

SELECTION_COLOR = 'rgba(0,0,0,0.5)';

WINDOW_COLOR = 'rgba(4,4,4,0.9)';

TILES = (_ref = [0, 1, 2, 3], AIR = _ref[0], EARTH = _ref[1], FIRE = _ref[2], WATER = _ref[3], _ref);

NEXT_LVL_BASE = 120;

BASE_POINTS = 2;

BASE_BONUS_MODIFIER = 2;

BASE_TIMER = 20000;

TIMER_MODIFIER = 1.1;

canvas = document.createElement('canvas');

canvas.width = CANVAS_WIDTH;

canvas.height = CANVAS_HEIGHT;

ctx = canvas.getContext('2d');

canvasRect = null;

document.body.appendChild(canvas);

generateBoard = function(columns, rows, tiles) {
  var board, i, size, _i;
  size = columns * rows;
  board = [];
  for (i = _i = 0; 0 <= size ? _i < size : _i > size; i = 0 <= size ? ++_i : --_i) {
    while (true) {
      board[i] = pick(tiles);
      if (!match(board, i, columns, rows)) {
        break;
      }
    }
  }
  return board;
};

running = false;

gameOver = false;

timer = null;

exp = null;

currentLvl = 0;

points = 0;

bonus = 0;

lastBestLvl = 0;

tile1 = null;

tile2 = null;

switchTiles = function(board, first, second) {
  var _ref1;
  return _ref1 = [board[second], board[first]], board[first] = _ref1[0], board[second] = _ref1[1], _ref1;
};

reset = function() {
  timer = {
    color: '#2a8',
    current: BASE_TIMER,
    max: BASE_TIMER
  };
  exp = {
    color: '#f95',
    current: 0,
    max: NEXT_LVL_BASE
  };
  currentLvl = 1;
  points = BASE_POINTS;
  bonus = BASE_BONUS_MODIFIER;
  lastBestLvl = getLastBest();
  return gameOver = false;
};

canvas.addEventListener('click', function(e) {
  var clickX, clickY, first, index, second, x, y;
  if (canvasRect == null) {
    canvasRect = canvas.getBoundingClientRect();
  }
  clickX = e.clientX - canvasRect.left;
  clickY = e.clientY - canvasRect.top;
  if (!running) {
    running = true;
    reset();
    return;
  }
  x = Math.floor((clickX - BOARD_OFFSET_X) / TILE_WIDTH);
  y = Math.floor((clickY - BOARD_OFFSET_Y) / TILE_HEIGHT);
  if (!((0 <= x && x < COLUMNS))) {
    return;
  }
  if (!((0 <= y && y < ROWS))) {
    return;
  }
  index = getIndex(x, y, COLUMNS);
  if (tile1 === null) {
    tile1 = index;
  } else {
    tile2 = index;
  }
  if (!((tile1 != null) && (tile2 != null))) {
    return;
  }
  if (areAdjacents(tile1, tile2, COLUMNS)) {
    switchTiles(board, tile1, tile2);
    first = match(board, tile1, COLUMNS, ROWS);
    second = match(board, tile2, COLUMNS, ROWS);
    if (!(first || second)) {
      switchTiles(board, tile1, tile2);
    }
  }
  return tile1 = tile2 = null;
});

bringDown = function(board, columns, rows, tiles) {
  var i, next, x, y, _i, _j, _ref1, _ref2, _results;
  for (i = _i = _ref1 = board.length - 1; _ref1 <= 0 ? _i <= 0 : _i >= 0; i = _ref1 <= 0 ? ++_i : --_i) {
    if (board[i] !== null) {
      continue;
    }
    x = getColumn(i, columns);
    y = getRow(i, columns);
    next = (y - 1) * columns + x;
    if ((0 <= next && next < board.length)) {
      switchTiles(board, i, next);
    }
  }
  _results = [];
  for (i = _j = 0, _ref2 = board.length; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
    if (board[i] === null) {
      _results.push(board[i] = pick(tiles));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

getExp = function(tiles, points, bonus) {
  var total;
  total = points * 3;
  if (tiles.length - 3 >= 0) {
    total += (tiles.length - 3) * bonus;
  }
  return total;
};

barsRenderOpts = {
  backgroundColor: BAR_BACKGROUND_COLOR,
  borderColor: BAR_BORDER_COLOR,
  borderSize: BAR_BORDER_SIZE,
  offsetX: BARS_OFFSET_X,
  offsetY: BARS_OFFSET_Y
};

board = generateBoard(COLUMNS, ROWS, TILES);

boardRenderOpts = {
  borderColor: TILE_BORDER_COLOR,
  borderSize: TILE_BORDER_SIZE,
  offsetX: BOARD_OFFSET_X,
  offsetY: BOARD_OFFSET_Y
};

reset();

update = function(dt) {
  var i, matches, _i, _j, _len, _ref1;
  if (running !== true) {
    return;
  }
  timer.current -= 1000 * dt;
  if (timer.current <= 0) {
    timer.current = 0;
    running = false;
    gameOver = true;
    if (currentLvl > getLastBest()) {
      setLastBest(currentLvl);
    }
    return;
  }
  matches = [];
  for (i = _i = 0, _ref1 = board.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
    if (match(board, i, COLUMNS, ROWS)) {
      matches.push(i);
    }
  }
  for (_j = 0, _len = matches.length; _j < _len; _j++) {
    i = matches[_j];
    board[i] = null;
  }
  if (!(matches.length > 0)) {
    return;
  }
  exp.current += getExp(matches, points, bonus);
  if (exp.current >= exp.max) {
    exp.current = 0;
    points *= currentLvl;
    bonus += 1;
    currentLvl += 1;
    exp.max *= currentLvl;
    timer.current = timer.max = timer.max * TIMER_MODIFIER;
  }
  return bringDown(board, COLUMNS, ROWS, TILES);
};

render = function() {
  ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
  fillRect(ctx, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT, BACKGROUND_COLOR);
  drawBars(ctx, [timer, exp], BAR_WIDTH, BAR_HEIGHT, barsRenderOpts);
  drawBoard(board, COLUMNS, ctx, TILE_WIDTH, TILE_HEIGHT, TEXTURES, boardRenderOpts);
  drawSelectedTile(ctx, COLUMNS, TILE_WIDTH, TILE_HEIGHT, tile1, boardRenderOpts);
  if (!running) {
    fillRect(ctx, BOARD_OFFSET_X, BOARD_OFFSET_Y, COLUMNS * TILE_WIDTH, ROWS * TILE_HEIGHT, WINDOW_COLOR);
    drawText(ctx, 'Click to start', TILE_WIDTH * 1.2, TILE_HEIGHT * 8, WINDOW_TEXT_COLOR, {
      align: 'left',
      font: 'bold 80px helvetica'
    });
    drawText(ctx, 'a new game', TILE_WIDTH * 1.4, TILE_HEIGHT * 9, WINDOW_TEXT_COLOR, {
      align: 'left',
      font: 'bold 80px helvetica'
    });
    drawText(ctx, 'Match 3 or more elements', TILE_WIDTH * 2.12, TILE_HEIGHT * 10.7, WINDOW_TEXT_COLOR, {
      align: 'left',
      font: 'bold 30px helvetica'
    });
  }
  drawText(ctx, "Level " + currentLvl, BOARD_OFFSET_X, 120, GAME_TEXT_COLOR, {
    align: 'left',
    font: 'bold 80px helvetica'
  });
  drawText(ctx, "Last best: " + lastBestLvl, BOARD_OFFSET_X, CANVAS_HEIGHT - 40, GAME_TEXT_COLOR, {
    align: 'left',
    font: 'bold 20px helvetica'
  });
  return drawText(ctx, 'GSSOC', CANVAS_WIDTH - BOARD_OFFSET_X, CANVAS_HEIGHT - 40, GAME_TEXT_COLOR, {
    align: 'right',
    font: 'bold 20px helvetica'
  });
};

step = 1 / FPS;

modifier = 1;

mStep = step * modifier;

dt = 0;

previousTime = new Date();

requestAnimationFrame(tick = function() {
  var currentTime;
  currentTime = new Date();
  dt += Math.min(1, (currentTime - previousTime) / 1000);
  previousTime = currentTime;
  while (dt > mStep) {
    update(step);
    dt -= mStep;
  }
  render();
  return requestAnimationFrame(tick);
});



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
